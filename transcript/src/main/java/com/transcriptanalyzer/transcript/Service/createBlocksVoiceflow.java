package com.transcriptanalyzer.transcript.Service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.HttpURLConnection;
import java.net.URL;

import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.Gson;
import lombok.AllArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@AllArgsConstructor
@Service
public class createBlocksVoiceflow {

    @Autowired
    public static void test_add_block(String email, String password, String diagramID) throws IOException {

        // Get the authorization token to create the blocks using the user's email and password
        // This token is generated by the login method in the getToken class
        String token = getToken.login(email, password);

        // Creat the URL object that will be used to establish a connection with the VF API to make the blocks
        // This url depends on the diagramID of the canvas on which the user wants to create a block
        URL url = new URL("https://api.voiceflow.com/v2/diagrams/" + diagramID + "/nodes/bulk");

        // Create the coordinates array for the 'block' json
        // I am setting the coordinates for simplicity. So our new block will always be placed
        // at the same spot, to the left of the start block.
        JsonArray coordinates = new JsonArray();
        coordinates.add(39.08144616655401);
        coordinates.add(-2.3717156662187664);

        // Creating the list of steps that the block we create next will refer to
        JsonArray steps = new JsonArray();
        steps.add("637bd7de7ff169f395f8eeb4");

        // Create the 'dataOuter' json object that will be nested within the 'block' json
        JsonObject dataOuter = new JsonObject();
        dataOuter.addProperty("name", "Introductory Block");
        dataOuter.addProperty("color", "standard");
        dataOuter.add("steps", steps);

        // Create the 'block' json object
        JsonObject blockJson = new JsonObject();
        blockJson.addProperty("nodeID", "637bd7de7ff169f395f8eeb7");
        blockJson.addProperty("type", "block");
        blockJson.add("coords", coordinates);
        blockJson.add("data", dataOuter);

        // Now I am going to create the step that the block we just defined refers to
        // It is a block with one text segment and three choice buttons

//        // Create the choices array list for the dataInner json object
//        ArrayList<JsonObject> choices = new ArrayList();
//        choices.add(createIntentJson("9n9u3hyb"));
//        choices.add(createIntentJson("0ebl3hv0"));
//        choices.add(createIntentJson("4dd83hev"));

//        // Create the 'dataInner' json object that will be nested within the 'block content' json
//        JsonObject dataInner = new JsonObject();
//        dataInner.addProperty("name", "Choice");
//        dataInner.addProperty("choices", choices);
//        dataInner.addProperty("intentScope", "GLOBAL");
//
//        // Create the 'block content' json object
//        JsonObject blockContentJson = new JsonObject();
//        blockContentJson.addProperty("type", "interaction");
//        blockContentJson.add("data", dataInner);
//        blockContentJson.addProperty("nodeID", "637bd7de7ff169f395f8eeb4");

        String blockContentString = "{'type': 'interaction', 'data': {'name': 'Choice', 'choices': [{" +
                                    "'intent': '9n9u3hyb', 'mappings': []}, {'intent': '0ebl3hv0', 'mappings': []" +
                                    "}, {'intent': '4dd83hev', 'mappings': []}], 'intentScope': 'GLOBAL', 'portsV2': {" +
                                    "'byKey': {}, 'builtIn': {'else': {'type': 'else', 'target': null," +
                                    "'id': '637bd7de7ff169f395f8eeb6'}}, 'dynamic': [{'type': '', 'target': null," +
                                    "'id': '637bd7de7ff169f395f8eeb5'}, {'id': '637bd9037ff169f395f8eebd','type': ''," +
                                    "'target': null}, {'id': '637bd9107ff169f395f8eebf', 'type': '', 'target': null" +
                                    "}]}}, 'nodeID': '637bd7de7ff169f395f8eeb4'}";

        JsonObject blockContentJson = (JsonObject) JsonParser.parseString(blockContentString);

        // Nest the 'block' and 'blockContent' json object within an ArrayList
        JsonArray blocks = new JsonArray();
        blocks.add(blockJson);
        blocks.add(blockContentJson);

        // Create 'body' json object for the HTTP request
        JsonObject body = new JsonObject();
        body.add("nodes", blocks);
        System.out.println(body);

        HttpURLConnection con = (HttpURLConnection) url.openConnection();
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-type", "application/json");
        con.setRequestProperty("Accept", "application/json");
        con.setDoOutput(true);
        con.setRequestProperty("Authorization", token);
        System.out.println("Connection made");

        try(OutputStream os = con.getOutputStream()) {
            byte[] bodyDataBytes = body.toString().getBytes();
            os.write(bodyDataBytes, 0, bodyDataBytes.length);
        }

        try(BufferedReader br = new BufferedReader(
                new InputStreamReader(con.getInputStream(), "utf-8"))) {
            StringBuilder response = new StringBuilder();
            String responseLine = null;
            while ((responseLine = br.readLine()) != null) {
                response.append(responseLine.trim());
            }
            System.out.println(response);
                // r = response.json();
        }

//            Python code I am translating (Specifically the post request)
//            response = requests.post(
//                    url,
//                    json = body,
//                    headers = header);
//            System.out.println(response);
//            // Log the response
//            r = response.json();
        }

//        public static JsonObject createIntentJson(String intentID){
//            JsonObject intent = new JsonObject();
//            intent.addProperty("intent", intentID);
//            intent.addProperty("mappings", new ArrayList());
//            return intent;
//        }


        public static void main(String[] args) throws IOException {
            test_add_block("molly.plunkett@mail.utoronto.ca",
                    "TLICKMMR2022",
                    "636ad5bf6ca8dfcaff607013");
        }
    }
